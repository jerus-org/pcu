version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.81"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."
  release-flag:
    type: boolean
    default: false
    description: "If true, the release pipeline will be executed."

orbs:
  toolkit: jerus-org/circleci-toolkit@2.3.0

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>
  base-env:
    docker:
      - image: jerusdp/ci-rust:base

jobs:
  test-setup:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_semver:
        type: boolean
        default: false
        description: "Whether or not set the semver version flag"
      pcu_commit_message:
        type: string
        default: "chore: test push"
        description: "The commit message to use for the pcu test push"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - run:
          name: Install pcu from project under test
          command: |
            cargo install --force --path .
      - run:
          name: Copy updated pcu to bin directory
          command: |
            set -exo pipefail

            mkdir -p ~/project/bin
            cp $(which pcu) ~/project/bin/pcu

      - persist_to_workspace:
          root: .
          paths:
            - bin

  test-commit:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_semver:
        type: boolean
        default: false
        description: "Whether or not set the semver version flag"
      pcu_commit_message:
        type: string
        default: "chore: test push"
        description: "The commit message to use for the pcu test push"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test commit
          command: |
            set -ex

            if [ "<< parameters.pcu_semver >>" == "true"  ] && [ $SEMVER != ""  ]; then
              bin/pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>" --semver $SEMVER
            else
              bin/pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>"
            fi

  test-push:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test push
          command: |
            set -ex
            if [ "<< parameters.pcu_no_push >>" == "true"  ] ; then
              no_push="--no-push"
            else 
              no_push=""
            fi

            bin/pcu << parameters.pcu_verbosity >> push ${no_push}

  test-bsky-blog-directory:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      - run:
          name: Draft bsky blog directory
          command: |
            set -ex

            mkdir -p bluesky

            bin/pcu << parameters.pcu_verbosity >> bsky draft tests/bsky/blog
            ls -la bluesky

      - run:
          name: Post bsky blog directory
          command: |
            set -ex

            ls -la bluesky
            bin/pcu << parameters.pcu_verbosity >> bsky post
            ls -la bluesky

  test-bsky-directory:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .

      - run:
          name: Draft bsky directory
          command: |
            set -ex

            rm -rf bluesky
            mkdir -p bluesky

            bin/pcu << parameters.pcu_verbosity >> bsky draft tests 
            ls -la
            ls -la bluesky
            cat $(ls -d bluesky/*)
            git status

      - run:
          name: Post bsky directory
          command: |
            set -ex

            ls -la bluesky
            bin/pcu << parameters.pcu_verbosity >> bsky post
            ls -la bluesky
            git status

  test-bsky-file:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .

      - run:
          name: Test bsky file
          command: |
            set -ex

            rm -rf bluesky
            mkdir -p bluesky  

            bin/pcu << parameters.pcu_verbosity >> bsky draft tests/bsky-test-blog.md
            ls -la
            ls -la bluesky
            cat bluesky/$(ls bluesky)
            git status

      - run:
          name: Post bsky file
          command: |
            set -ex

            ls -la bluesky
            bin/pcu << parameters.pcu_verbosity >> bsky post
            ls -la bluesky
            git status

workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.release-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/choose_pipeline:
          name: choose pipeline based on committer
          context: bot-check

  validation:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.release-flag >>
        - << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/label:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context: pcu-app
          filters:
            branches:
              only:
                - main
      - toolkit/code_coverage:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/required_builds:
          name: required-builds
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/optional_builds:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/test_doc_build:
          name: docs
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/common_tests:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - test-setup:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - toolkit/common_tests
            - toolkit/security
            - required-builds
            - docs
            - toolkit/idiomatic_rust
      - test-commit:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - test-setup
      - test-push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - test-setup
      - test-bsky-blog-directory:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
            - bluesky
          requires:
            - test-setup
      - test-bsky-directory:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
            - bluesky
          requires:
            - test-setup
      - test-bsky-file:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
            - bluesky
          requires:
            - test-setup

      - toolkit/security:
          context: SonarCloud
          ignore_advisories: "RUSTSEC-2025-0007"
      - toolkit/update_changelog:
          requires:
            - test-push
            - test-commit
            - test-bsky-blog-directory
            - test-bsky-directory
            - test-bsky-file
          context:
            - release
            - bot-check
            - pcu-app
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          # update_pcu: true
          # install_me: true
          pcu_verbosity: "-vvvv"
          pcu_push: false
      - toolkit/push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - toolkit/update_changelog
          pcu_verbosity: "-vvvv"

  on_success:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
        - not: << pipeline.parameters.release-flag >>

    jobs:
      - toolkit/end_success

  release:
    when:
      and:
        - or:
            - and:
                - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
                - equal: ["release check", << pipeline.schedule.name >>]
            - <<  pipeline.parameters.release-flag >>
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/save_next_version:
          min_rust_version: << pipeline.parameters.min-rust-version >>

      - toolkit/make_release:
          context:
            - release
            - bot-check
          requires:
            - toolkit/save_next_version
          pre-steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                name: Set SEMVER based on next-version file
                command: |
                  set +ex
                  export SEMVER=$(cat /tmp/workspace/next-version)
                  echo $SEMVER
                  echo "export SEMVER=$SEMVER" >> "$BASH_ENV"
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          when_use_workspace: false

      - toolkit/no_release:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          requires:
            - toolkit/save_next_version:
                - failed

version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.79"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."

orbs:
  toolkit: jerus-org/circleci-toolkit@1.4.3

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>
  base-env:
    docker:
      - image: jerusdp/ci-rust:base

commands:
  update_log:
    parameters:
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_halt_signal:
        type: string
        default: "halt"
        description: "The verbosity of the pcu command"

    steps:
      - run:
          name: Update changelog or halt step
          command: |
            set -ex
            if [[ -v CIRCLE_PULL_REQUEST ]]; then
              result=$(pcu <<parameters.pcu_verbosity>> pull-request --early-exit)
              if [ "$result" == << parameters.pcu_halt_signal >> ]; then
                circleci-agent step halt
              fi
            fi

  pipeline_pcu_check:
    parameters:
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_halt_signal:
        type: string
        default: "halt"
        description: "The verbosity of the pcu command"
      branch:
        type: env_var_name
        default: CIRCLE_BRANCH
        description: "The branch for the pipeline"
    steps:
      - run:
          name: Update change or redirect to success pipeline
          command: |
            set -ex

            result=$(echo halt)

            if [[ -v CIRCLE_PULL_REQUEST ]]; then
              result=$(pcu <<parameters.pcu_verbosity>> pull-request --early-exit)
            fi

            if [ "$result" == << parameters.pcu_halt_signal >> ]; then
              export PROJECT_SLUG="gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
              BODY='{"branch":"'
              BODY+=${<< parameters.branch >>}
              BODY+='","parameters":{"success-flag":true}}'
              echo $BODY
              curl -u ${CIRCLE_TOKEN}: \
                -X POST \
                --header 'content-type: application/json' \
                -d $BODY \
                https://circleci.com/api/v2/project/$PROJECT_SLUG/pipeline
            fi

  rebase_dep_pr:
    parameters:
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
    steps:
      - run:
          name: Rebase dependency PR
          command: |
            set -ex
            if [ -z "${CIRCLE_PULL_REQUEST}" ]; then
              pcu <<parameters.pcu_verbosity>> rebase -a gortavoher -l test3 -d "Yet another test label"
            fi

  install_latest_pcu:
    steps:
      - run:
          name: Install latest pcu
          command: |
            set -ex
            cargo install --force --git https://github.com/jerus-org/pcu --branch $CIRCLE_BRANCH

jobs:
  update_changelog:
    executor: rust-env

    parameters:
      min_rust_version:
        type: string
        description: "The minimum version of the rust compiler to use"
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      gpg_key:
        type: env_var_name
        default: BOT_GPG_KEY
        description: "The base64 encoded GPG key"
      gpg_trust:
        type: env_var_name
        default: BOT_TRUST
        description: "The trust associated with the GPG key"
      user_email:
        type: env_var_name
        default: BOT_USER_EMAIL
        description: "The user email associated with the GPG key"
      user_name:
        type: env_var_name
        default: BOT_USER_NAME
        description: "The user name associated with the GPG key"
      sign_key:
        type: env_var_name
        default: BOT_SIGN_KEY
        description: "The GPG key id associated with the GPG key"
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_halt_signal:
        type: string
        default: "halt"
        description: "The verbosity of the pcu command"
      update_log_option:
        type: enum
        enum: ["halt", "pipeline"]
        default: "pipeline"
        description: "The option to halt or continue with new pipeline when a change log does not need to be updated"
      update_pcu:
        type: boolean
        default: false
        description: "Update pcu to the latest code from the git repo"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - when:
          condition: << parameters.update_pcu >>
          steps:
            - install_latest_pcu
      - run:
          name: pcu version
          command: |
            pcu --version
      - when:
          condition:
            equal: [halt, << parameters.update_log_option >>]
          steps:
            - update_log:
                pcu_verbosity: <<parameters.pcu_verbosity>>
                pcu_halt_signal: <<parameters.pcu_halt_signal>>
      - rebase_dep_pr:
          pcu_verbosity: <<parameters.pcu_verbosity>>

      - when:
          condition:
            equal: [pipeline, << parameters.update_log_option >>]
          steps:
            - pipeline_pcu_check:
                pcu_verbosity: <<parameters.pcu_verbosity>>
                pcu_halt_signal: <<parameters.pcu_halt_signal>>

  test-commit:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_semver:
        type: boolean
        default: false
        description: "Whether or not set the semver version flag"
      pcu_commit_message:
        type: string
        default: "chore: test push"
        description: "The commit message to use for the pcu test push"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - run:
          name: Install pcu from code on main branch of on github
          command: |
            cargo install --force --git https://github.com/jerus-org/pcu.git --branch $CIRCLE_BRANCH
      - run:
          name: pcu version
          command: |
            pcu --version
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test commit
          command: |
            set -ex

            if [ "<< parameters.pcu_semver >>" == "true"  ] && [ $SEMVER != ""  ]; then
              pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>" --semver $SEMVER
            else
              pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>"
            fi

  test-push:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - run:
          name: Install pcu from code on main branch of on github
          command: |
            cargo install --force --git https://github.com/jerus-org/pcu.git --branch $CIRCLE_BRANCH
      - run:
          name: pcu version
          command: |
            pcu --version
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test push
          command: |
            set -ex
            if [ "<< parameters.pcu_no_push >>" == "true"  ] ; then
              no_push="--no-push"
            else 
              no_push=""
            fi

            pcu << parameters.pcu_verbosity >> push ${no_push}

workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/choose_pipeline:
          name: choose pipeline based on committer
          context: bot-check

  validation:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/required_builds:
          name: required-builds
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/optional_builds:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/test_doc_build:
          name: docs
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/common_tests:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - test-commit:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          context:
            - release
            - bot-check
            - pcu-app
      - test-push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
      - update_changelog:
          requires:
            - toolkit/common_tests
            - required-builds
            - docs
            - toolkit/idiomatic_rust
            - test-push
          context:
            - release
            - bot-check
            - pcu-app
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          update_pcu: true
          pcu_verbosity: "-vvvv"

  on_success:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/end_success

  release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release check", << pipeline.schedule.name >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/make_release:
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          pcu_verbosity: "-vvvv"
          update_pcu: true

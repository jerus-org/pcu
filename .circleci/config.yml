version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.81"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."
  release-flag:
    type: boolean
    default: false
    description: "If true, the release pipeline will be executed."

orbs:
  toolkit: jerus-org/circleci-toolkit@2.1.0

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>
  base-env:
    docker:
      - image: jerusdp/ci-rust:base

commands:
  pipeline_pcu_check:
    description: >
      Makes a post request to https://circleci.com/api/v2/pipeline/continue to
      continue a setup workflow.

    parameters:
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_halt_signal:
        type: string
        default: "halt"
        description: "String representing the halt signal"
      pcu_push:
        type: boolean
        default: true
        description: "Push the commits to the remote repository"
      api_token_key:
        type: env_var_name
        default: TOKEN
        description: "The api token to use"
      branch:
        type: env_var_name
        default: CIRCLE_BRANCH
        description: "The branch for the pipeline"
    steps:
      - run:
          name: Update change or redirect to success pipeline
          command: |
            set -ex

            if [ true == << parameters.pcu_push >> ]; then
              push="--push"
            else
             push=""
            fi

            result=$(pcu <<parameters.pcu_verbosity>> pr --early-exit $push)
            if [ "$result" == << parameters.pcu_halt_signal >> ]; then
              export PROJECT_SLUG="gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
              BODY='{"branch":"'
              BODY+=${<< parameters.branch >>}
              BODY+='","parameters":{"success-flag":true}}'
              echo $BODY
              curl -u ${CIRCLE_TOKEN}: \
                -X POST \
                --header 'content-type: application/json' \
                -d $BODY \
                https://circleci.com/api/v2/project/$PROJECT_SLUG/pipeline
            fi

jobs:
  update_changelog:
    description: >
      Update the changelog based on the pull request

    executor:
      name: rust-env

    parameters:
      min_rust_version:
        type: string
        description: "The minimum version of the rust compiler to use"
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      gpg_key:
        type: env_var_name
        default: BOT_GPG_KEY
        description: "The base64 encoded GPG key"
      gpg_trust:
        type: env_var_name
        default: BOT_TRUST
        description: "The trust associated with the GPG key"
      user_email:
        type: env_var_name
        default: BOT_USER_EMAIL
        description: "The user email associated with the GPG key"
      user_name:
        type: env_var_name
        default: BOT_USER_NAME
        description: "The user name associated with the GPG key"
      sign_key:
        type: env_var_name
        default: BOT_SIGN_KEY
        description: "The GPG key id associated with the GPG key"
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_halt_signal:
        type: string
        default: "halt"
        description: "The verbosity of the pcu command"
      update_log_option:
        type: enum
        enum: ["halt", "pipeline"]
        default: "pipeline"
        description: "The option to halt or continue with new pipeline when a change log does not need to be updated"
      update_pcu:
        type: boolean
        default: false
        description: "Update pcu to the latest code from the git repo"
      install_me:
        type: boolean
        default: false
        description: "Install the current crate as a binary"
      install_me_path:
        type: string
        default: "."
        description: "The path to the crate to install"
      label_option:
        type: boolean
        default: false
        description: "Apply a label to the oldest open PR created by the specified author"
      pcu_author:
        type: string
        default: ""
        description: "Custom pull request author."
      pcu_label:
        type: string
        default: ""
        description: "Custom pull request label."
      pcu_desc:
        type: string
        default: ""
        description: "Custom pull request description."
      pcu_colour:
        type: string
        default: ""
        description: "Custom pull request colour."
      pcu_push:
        type: boolean
        default: true
        description: "Optional flag to allow the push to fail"
      pcu_allow_push_fail:
        type: enum
        enum:
          - ""
          - "--allow-push-fail"
        default: ""
        description: "Optional flag to allow the push to fail"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - when:
          condition: << parameters.update_pcu >>
          steps:
            - toolkit/install_latest_pcu
      - when:
          condition: << parameters.install_me >>
          steps:
            - toolkit/install_me:
                path_to_crate: << parameters.install_me_path >>
      - run:
          name: pcu version
          command: |
            pcu --version
      - when:
          condition:
            equal: [halt, << parameters.update_log_option >>]
          steps:
            - toolkit/update_log:
                pcu_verbosity: <<parameters.pcu_verbosity>>
                pcu_halt_signal: <<parameters.pcu_halt_signal>>
                pcu_allow_push_fail: <<parameters.pcu_allow_push_fail>>
      - when:
          condition:
            equal: [true, << parameters.label_option >>]
          steps:
            - toolkit/label_pr:
                pcu_verbosity: <<parameters.pcu_verbosity>>
                pcu_author: <<parameters.pcu_author>>
                pcu_label: <<parameters.pcu_label>>
                pcu_desc: <<parameters.pcu_desc>>
                pcu_colour: <<parameters.pcu_colour>>
      - when:
          condition:
            equal: [pipeline, << parameters.update_log_option >>]
          steps:
            - pipeline_pcu_check:
                pcu_verbosity: <<parameters.pcu_verbosity>>
                pcu_halt_signal: <<parameters.pcu_halt_signal>>
                pcu_push: <<parameters.pcu_push>>

  test-setup:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_semver:
        type: boolean
        default: false
        description: "Whether or not set the semver version flag"
      pcu_commit_message:
        type: string
        default: "chore: test push"
        description: "The commit message to use for the pcu test push"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - run:
          name: Install pcu from project under test
          command: |
            cargo install --force --path .
      - run:
          name: Copy updated pcu to bin directory
          command: |
            set -exo pipefail

            mkdir -p ~/project/bin
            cp $(which pcu) ~/project/bin/pcu

      - persist_to_workspace:
          root: .
          paths:
            - bin

  test-commit:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_semver:
        type: boolean
        default: false
        description: "Whether or not set the semver version flag"
      pcu_commit_message:
        type: string
        default: "chore: test push"
        description: "The commit message to use for the pcu test push"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test commit
          command: |
            set -ex

            if [ "<< parameters.pcu_semver >>" == "true"  ] && [ $SEMVER != ""  ]; then
              bin/pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>" --semver $SEMVER
            else
              bin/pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>"
            fi

  test-push:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test push
          command: |
            set -ex
            if [ "<< parameters.pcu_no_push >>" == "true"  ] ; then
              no_push="--no-push"
            else 
              no_push=""
            fi

            bin/pcu << parameters.pcu_verbosity >> push ${no_push}

  test-bsky:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      # - run:
      #     name: Create test file
      #     command: |
      #       set -ex
      #       echo "test" > tests/bsky/blog/test.md
      #       ls -la tests/bsky/blog
      # - run:
      #     name: Test bsky filter
      #     command: |
      #       set -ex

      #       bin/pcu << parameters.pcu_verbosity >> bsky --filter blog
      - run:
          name: Draft bsky blog directory
          command: |
            set -ex

            mkdir -p bluesky

            bin/pcu << parameters.pcu_verbosity >> bsky draft tests/bsky/blog
            ls -la bluesky
      - run:
          name: Draft bsky directory
          command: |
            set -ex

            rm -rf bluesky
            mkdir -p bluesky

            bin/pcu << parameters.pcu_verbosity >> bsky draft tests 
            ls -la
            ls -la bluesky
            cat $(ls -d bluesky/*)

      - run:
          name: Post bsky directory
          command: |
            set -ex

            ls -la bluesky
            bin/pcu << parameters.pcu_verbosity >> bsky post
            ls -la bluesky

      - run:
          name: Test bsky file
          command: |
            set -ex

            rm -rf bluesky
            mkdir -p bluesky  

            bin/pcu << parameters.pcu_verbosity >> bsky draft tests/bsky-test-blog.md
            ls -la
            ls -la bluesky
            cat bluesky/$(ls bluesky)

      - run:
          name: Post bsky directory
          command: |
            set -ex

            ls -la bluesky
            bin/pcu << parameters.pcu_verbosity >> bsky post
            ls -la bluesky
      - run:
          name: Check git status
          command: |
            set -ex
            git status

workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.release-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/choose_pipeline:
          name: choose pipeline based on committer
          context: bot-check

  validation:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.release-flag >>
        - << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/label:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context: pcu-app
          filters:
            branches:
              only:
                - main
      - toolkit/code_coverage:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/required_builds:
          name: required-builds
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/optional_builds:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/test_doc_build:
          name: docs
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/common_tests:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - test-setup:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - toolkit/common_tests
            - toolkit/security
            - required-builds
            - docs
            - toolkit/idiomatic_rust
      - test-commit:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - test-setup
      - test-push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - test-setup
      - test-bsky:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
            - bluesky
          requires:
            - test-setup

      - toolkit/security:
          context: SonarCloud
          ignore_advisories: "RUSTSEC-2025-0007"
      - update_changelog:
          requires:
            - test-push
            - test-commit
            - test-bsky
          context:
            - release
            - bot-check
            - pcu-app
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          # update_pcu: true
          install_me: true
          pcu_verbosity: "-vvvv"
          pcu_push: false
      - toolkit/push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - update_changelog

  on_success:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
        - not: << pipeline.parameters.release-flag >>

    jobs:
      - toolkit/end_success

  release:
    when:
      and:
        - or:
            - and:
                - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
                - equal: ["release check", << pipeline.schedule.name >>]
            - <<  pipeline.parameters.release-flag >>
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/save_next_version:
          min_rust_version: << pipeline.parameters.min-rust-version >>

      - toolkit/make_release:
          context:
            - release
            - bot-check
          requires:
            - toolkit/save_next_version
          pre-steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                name: Set SEMVER based on next-version file
                command: |
                  set +ex
                  export SEMVER=$(cat /tmp/workspace/next-version)
                  echo $SEMVER
                  echo "export SEMVER=$SEMVER" >> "$BASH_ENV"
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          when_use_workspace: false

      - toolkit/no_release:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          requires:
            - toolkit/save_next_version:
                - failed

version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.87"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."
  release-flag:
    type: boolean
    default: false
    description: "If true, the release pipeline will be executed."
  update_pcu:
    type: boolean
    default: false

orbs:
  toolkit: jerus-org/circleci-toolkit@2.13.0

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>
  base-env:
    docker:
      - image: jerusdp/ci-rust:base

jobs:
  test-setup:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_semver:
        type: boolean
        default: false
        description: "Whether or not set the semver version flag"
      pcu_commit_message:
        type: string
        default: "chore: test push"
        description: "The commit message to use for the pcu test push"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - run:
          name: Install pcu from project under test
          command: |
            cargo install --force --path ./crates/pcu
      - run:
          name: Copy updated pcu to bin directory
          command: |
            set -exo pipefail

            mkdir -p ~/project/bin
            cp $(which pcu) ~/project/bin/pcu

      - run:
          name: Set test root for bluesky testing jobs
          command: |
            echo 'export BSKY_TEST_ROOT="crates/pcu/tests/bsky"' >> bash.env

      - persist_to_workspace:
          root: .
          paths:
            - bin
            - bash.env

  test-commit:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_semver:
        type: boolean
        default: false
        description: "Whether or not set the semver version flag"
      pcu_commit_message:
        type: string
        default: "chore: test push"
        description: "The commit message to use for the pcu test push"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test commit
          command: |
            set -ex

            if [ "<< parameters.pcu_semver >>" == "true"  ] && [ $SEMVER != ""  ]; then
              bin/pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>" --semver $SEMVER
            else
              bin/pcu << parameters.pcu_verbosity >> commit --commit-message "<< parameters.pcu_commit_message >>"
            fi

  test-push:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .
      - run:
          name: Create test file
          command: |
            set -ex
            echo "test" > test.txt
      - run:
          name: Test push
          command: |
            set -ex
            if [ "<< parameters.pcu_no_push >>" == "true"  ] ; then
              no_push="--no-push"
            else 
              no_push=""
            fi

            bin/pcu << parameters.pcu_verbosity >> push ${no_push}

  test-bsky-directory:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .

      - run:
          name: Load environment variable
          command: |
            cat bash.env >> $BASH_ENV
      - run:
          name: Use environment variable
          command: echo $BSKY_TEST_ROOT

      - run:
          name: Draft bsky directory
          command: |
            set -ex

            rm -rf $BSKY_TEST_ROOT/bluesky
            mkdir -p $BSKY_TEST_ROOT/bluesky
            ls -la

            bin/pcu << parameters.pcu_verbosity >> bsky draft -d 2025-04-01 -w $BSKY_TEST_ROOT content/blog
            ls -la
            ls -la $BSKY_TEST_ROOT
            ls -la $BSKY_TEST_ROOT/bluesky
            cat $(ls -d $BSKY_TEST_ROOT/bluesky/*)
            ls -la $BSKY_TEST_ROOT/static/s
            cat $(ls -d $BSKY_TEST_ROOT/static/s/*)
            git status

      - run:
          name: Post bsky directory
          command: |
            set -ex

            export TESTING=true
            ls -la $BSKY_TEST_ROOT/bluesky
            bin/pcu << parameters.pcu_verbosity >> bsky post
            ls -la $BSKY_TEST_ROOT/bluesky
            git status

  test-bsky-file:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
        description: |
          The fingerprint of the ssh key to use
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
      pcu_no_push:
        type: boolean
        default: false
        description: "Whether or not prevent final push of commit"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      # Start with the test setup workspace
      - attach_workspace:
          at: .

      - run:
          name: Load environment variable
          command: |
            cat bash.env >> $BASH_ENV
      - run:
          name: Use environment variable
          command: echo $BSKY_TEST_ROOT

      - run:
          name: Test bsky file
          command: |
            set -ex

            rm -rf ${BSKY_TEST_ROOT}/bluesky
            mkdir -p ${BSKY_TEST_ROOT}/bluesky  

            bin/pcu << parameters.pcu_verbosity >> bsky draft -d 2025-04-01 -w ${BSKY_TEST_ROOT} content/blog/bsky-test-blog.md
            ls -la ${BSKY_TEST_ROOT}
            ls -la ${BSKY_TEST_ROOT}/bluesky

      - run:
          name: Display bluesky post contents
          command: |
            set -ex

            ls -la ${BSKY_TEST_ROOT}/bluesky
            cat ${BSKY_TEST_ROOT}/bluesky/$(ls ${BSKY_TEST_ROOT}/bluesky)

      - run:
          name: Display short link contents
          command: |
            set -ex

            ls -la ${BSKY_TEST_ROOT}/static/s
            cat ${BSKY_TEST_ROOT}/static/s/*.html
            cat ${BSKY_TEST_ROOT}/static/s/registry.json

      - run:
          name: Git status after drafting
          command: |
            git status

      - run:
          name: Post bsky file
          command: |
            set -ex

            export TESTING=true
            ls -la ${BSKY_TEST_ROOT}/bluesky
            bin/pcu << parameters.pcu_verbosity >> bsky post
            ls -la ${BSKY_TEST_ROOT}/bluesky
            git status

  commit_and_push:
    description: |
      Push updates to the remote repository.
    executor:
      name: rust-env
    parameters:
      install_me:
        default: false
        description: Install the current crate as a binary
        type: boolean
      install_me_path:
        default: .
        description: The path to the crate to install
        type: string
      min_rust_version:
        description: The minimum version of the rust compiler to use
        type: string
      pcu_commit_message:
        default: "chore: test push"
        description: The commit message to use for the pcu test push
        type: string
      pcu_no_push:
        default: false
        description: Whether or not prevent final push of commit
        type: boolean
      pcu_semver:
        default: false
        description: Whether or not to push a semver version
        type: boolean
      pcu_verbosity:
        default: "-vv"
        description: The verbosity of the pcu command
        type: string
      ssh_fingerprint:
        description: |
          The fingerprint of the ssh key to use
        type: string
      update_pcu:
        default: false
        description: Update pcu to the latest code from the git repo
        type: boolean
      workspace:
        default: ""
        description: Name of attached shared workspace to copy from
        type: string
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
          name: Remove original SSH key from agent
      - toolkit/gpg_key
      - toolkit/git_config
      - when:
          condition: << parameters.update_pcu >>
          steps:
            - toolkit/install_latest_pcu
      - when:
          condition: << parameters.install_me >>
          name: Install pcu from main branch on GitHub
          steps:
            - toolkit/install_me:
                path_to_crate: << parameters.install_me_path >>
      - when:
          condition: << parameters.workspace >>
          steps:
            - run:
                command: |
                  set -ex

                  echo "Assumed: workspace was created and attached in pre-step"
                  ls << parameters.workspace >>
                  cp -rv << parameters.workspace >>/* .
                name: Copy files from the workspace
      - run:
          command: |
            pcu --version
          name: pcu version
      - toolkit/commit_cmd:
          pcu_commit_message: << parameters.pcu_commit_message >>
          pcu_semver: << parameters.pcu_semver >>
          pcu_verbosity: << parameters.pcu_verbosity >>
      - toolkit/push_cmd:
          pcu_no_push: << parameters.pcu_no_push >>
          pcu_semver: << parameters.pcu_semver >>
          pcu_verbosity: << parameters.pcu_verbosity >>

workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: ["main", << pipeline.git.branch >>]
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/choose_pipeline:
          name: choose pipeline based on committer
          context: bot-check

  validation:
    when:
      and:
        - << pipeline.parameters.validation-flag >>
        - or:
            - equal: ["main", << pipeline.git.branch >>]
            - and:
                - not:
                    equal: [scheduled_pipeline, << pipeline.trigger_source >>]
                - not: << pipeline.parameters.success-flag >>
    jobs:
      - toolkit/label:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context: pcu-app
          filters:
            branches:
              only:
                - main
      - toolkit/required_builds:
          name: required-builds
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/optional_builds:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/test_doc_build:
          name: docs
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/common_tests:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - test-setup:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          context:
            - release
            - bot-check
            - pcu-app

      - test-commit:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - test-setup
            - toolkit/common_tests
            - toolkit/security
            - required-builds
            - docs
            - toolkit/idiomatic_rust
      - test-push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - test-setup
            - toolkit/common_tests
            - toolkit/security
            - required-builds
            - docs
            - toolkit/idiomatic_rust
      - test-bsky-directory:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
            - bluesky
          requires:
            - test-setup
            - toolkit/common_tests
            - toolkit/security
            - required-builds
            - docs
            - toolkit/idiomatic_rust
      - test-bsky-file:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          pcu_verbosity: "-vvvv"
          pcu_no_push: true
          context:
            - release
            - bot-check
            - pcu-app
            - bluesky
          requires:
            - test-setup
            - toolkit/common_tests
            - toolkit/security
            - required-builds
            - docs
            - toolkit/idiomatic_rust

      - toolkit/security:
          context: SonarCloud
          ignore_advisories: "RUSTSEC-2025-0007"
      - toolkit/update_prlog:
          filters:
            branches:
              ignore:
                - main
          requires:
            - test-push
            - test-commit
            - test-bsky-directory
            - test-bsky-file
          context:
            - release
            - bot-check
            - pcu-app
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          pcu_verbosity: "-vvvv"
          pcu_push: false

      - commit_and_push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          pcu_verbosity: "-vvvv"
          pcu_commit_message: "chore: update pr log"
          filters:
            branches:
              ignore:
                - main
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - toolkit/update_prlog
          pre-steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                name: Copy PRLOG.md from workspace
                run: |
                  set -exo pipefail

                  cp -vf /tmp/workspace/PRLOG.md ./PRLOG.md

  on_success:
    when:
      and:
        - not:
            equal: ["main", <<pipeline.git.branch >>]
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
        - not: << pipeline.parameters.release-flag >>

    jobs:
      - toolkit/end_success

  release:
    when:
      and:
        - or:
            - and:
                - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
                - equal: ["release check", << pipeline.schedule.name >>]
            - <<  pipeline.parameters.release-flag >>
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
        - <<  pipeline.parameters.release-flag >>
    jobs:
      - toolkit/make_release:
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          when_update_pcu: << pipeline.parameters.update_pcu >>
